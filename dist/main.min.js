(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/entities/player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
};

module.exports = Player;

},{}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/lib/bsp.js":[function(require,module,exports){
var random = require('../util/random');

function bsp(width, height) {

  var Leaf = function(x, y, width, height) {
    this.minLeafSize = 6;
    this.y = y;
    this.x = x;
    this.width = width;
    this.height = height;
    this.leftChild = null;
    this.rightChild = null;
  };

  Leaf.prototype.split = function split() {
    if (this.leftChild != null || this.rightChild != null)
      return false;

    // determine direction of split
    // if the width is >25% larger than height, we split vertically
    // if the height is >25% larger than the width, we split horizontally
    // otherwise we split randomly
    var splitHeight = random.getRandomArbitrary(0,1) > 0.5;
    if (this.width > this.height && this.width / this.height >= 1.25)
      splitHeight = false;
    else if (this.height > this.width && this.height / this.width >= 1.25)
      splitHeight = true;

    var max = (splitHeight ? this.height : this.width) - this.minLeafSize; // determine the maximum height or width
    if (max <= this.minLeafSize)
      return false; // the area is too small to split any more...

    var split = random.getRandomInt(this.minLeafSize, max); // determine where we're going to split

    // create our left and right children based on the direction of the split
    if (splitHeight)
    {
      this.leftChild = new Leaf(this.x, this.y, this.width, split);
      this.rightChild = new Leaf(this.x, this.y + split, this.width, this.height - split);
    }
    else
    {
      this.leftChild = new Leaf(this.x, this.y, split, this.height);
      this.rightChild = new Leaf(this.x + split, this.y, this.width - split, this.height);
    }
    return true; // split successful!
  };


  var maxLeafSize = 20;
  var leafs = [];
  var currentLeaf = null;
  var root = new Leaf(0, 0, width, height);
  var output = [];
  leafs.push(root);

  var didSplit = true;

  // we loop through every Leaf in our Vector over and over again, until no more Leafs can be split.
  while (didSplit) {
    didSplit = false;
    for(var i =0;i<leafs.length;i++)
    {
      currentLeaf = leafs[i];
      if (currentLeaf.leftChild == null && currentLeaf.rightChild == null) // if this Leaf is not already split...
      {
        // if this Leaf is too big, or 75% chance...
        if (currentLeaf.width > maxLeafSize || currentLeaf.height > maxLeafSize || random.getRandomArbitrary(0,1) > 0.25) {
          if (currentLeaf.split()) // split the Leaf!
          {
            // if we did split, push the child leafs to the Vector so we can loop into them next
            leafs.push(currentLeaf.leftChild);
            leafs.push(currentLeaf.rightChild);
            didSplit = true;
          }
          else {
            output.push(currentLeaf);
          }
        }
      }
    }
  }
  return output;
}

module.exports = bsp;
},{"../util/random":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/util/random.js"}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'pixelcrawl-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));

game.state.start('Boot');


},{"./states/boot":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/boot.js","./states/game":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/game.js","./states/menu":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/menu.js","./states/preloader":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/preloader.js","./states/splash":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/splash.js","./utils":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/utils.js"}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.stage.scale.pageAlignHorizontally = true;
    } else {
      this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth =  800;
      this.game.scale.minHeight = 600;
      this.game.scale.maxWidth =1024;
      this.game.scale.maxHeight = 1024;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Walk = require('../util/walk');
var bug = require('../util/debugger');

var Game = function () {
  this.testentity = null;
};

module.exports = Game;

Game.prototype = {
  create: function () {
    this.game.stage.backgroundColor = 0x444444;
    this.game.physics.startSystem(Phaser.Physics.arcade);
    var x = (this.game.width / 2) - 100;
    var y = (this.game.height / 2) - 50;
    this.map = this.game.add.tilemap();
    //(tileset, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid)
    this.map.addTilesetImage('crawl_tileset');
    this.layer1 = this.map.create('level1', 100, 100, 32, 32);
    this.layer1.resizeWorld();
    this.map.fill(809, 0, 0, 100, 100, this.layer1);
    //this.map.fill(0, 10, 10, 5, 8, this.layer1);
    var leafs = bug();
    for(var j=0;j<leafs.length;j++) {
      var currentRoom = leafs[j];
      this.map.fill(0, currentRoom.x+1, currentRoom.y+1, currentRoom.width-2, currentRoom.height-2, this.layer1);
    }
    this.player = this.game.add.sprite(11*32, 11*32, 'player');

    this.game.physics.arcade.enable(this.layer1);
    this.game.physics.arcade.enable(this.player);

    this.map.setCollision(809);
    //Then the physics engine creates collision bodies from the tiles:

    //the camera will follow the player in the world
    this.game.camera.follow(this.player);
    this.player.body.setSize(32, 32, 0, 0);
    //move player with cursor keys
    this.cursors = this.game.input.keyboard.createCursorKeys();


    //this.testentity = new Player(this.game, x, y);
    this.something = new Walk();
    //this.walkData = this.something.drunkardWalk([0,0],100,true);
    //this.testentity.anchor.setTo(0.5, 0.5);

    //this.outlineRoom(this.map,5,5,5,10);

    this.input.onDown.add(this.onInputDown, this);


  },

  update: function () {
    this.game.physics.arcade.collide(this.player, this.layer1);
    //player movement
    this.player.body.velocity.y = 0;
    this.player.body.velocity.x = 0;

    if(this.cursors.up.isDown) {
      this.player.body.velocity.y -= 320;
    }
    else if(this.cursors.down.isDown) {
      this.player.body.velocity.y += 320;
    }
    if(this.cursors.left.isDown) {
      this.player.body.velocity.x -= 320;
    }
    else if(this.cursors.right.isDown) {
      this.player.body.velocity.x += 320;
    }
  },

  onInputDown: function () {
    this.game.state.start('Menu');
  }
};

},{"../entities/player":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/entities/player.js","../util/debugger":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/util/debugger.js","../util/walk":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/util/walk.js"}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;

    var style = { font: "65px Arial", fill: "#ffffff", align: "center" };

    this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

    this.input.onDown.add(this.onDown, this);
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start(playerState.currentLevel);
  }
};

},{}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(320, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    this.load.image('testsprite', 'assets/test.png');
    this.load.image('rougelite','assets/tileset/tile.png');
    this.load.image('crawl_tileset','assets/tileset/crawl_tileset.png');
    this.load.image('player','assets/player.png');
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/util/debugger.js":[function(require,module,exports){
var bsp = require('../lib/bsp');

module.exports = function test() {
  var leafs = bsp(100,100);
  return leafs;
};
},{"../lib/bsp":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/lib/bsp.js"}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/util/random.js":[function(require,module,exports){
/**
 * Returns a random number between min (inclusive) and max (exclusive)
 */
module.exports.getRandomArbitrary = function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
};

/**
 * Returns a random integer between min (inclusive) and max (inclusive)
 * Using Math.round() will give you a non-uniform distribution!
 */
module.exports.getRandomInt = function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};
/**
 * Shuffle an array randomly
 * @param array
 * @returns {*}
 */
module.exports.shuffleArray = function shuffleArray(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
  return array;
};

},{}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/util/walk.js":[function(require,module,exports){
var random = require('../util/random');

var Walk = function() {
  var something;
};

Walk.prototype.randomWalk = function randomWalk(steps, cardinal) {
  var path = [];
  for (var i = 0; i < steps; i++) {
    path.push(this.randomDirection(cardinal))
  }
  return path;
};

Walk.prototype.drunkardWalk = function drunkardWalk(start, steps, cardinal) {
  var path = [];
  var currentStep = start;
  var nextStep;
  var possibleSteps = this.possibleSteps(cardinal);

  //Loop for n steps
  while (steps > 0) {
    //Get a random shuffled array of all possible steps
    var nextStepList = random.shuffleArray(possibleSteps).slice();
    //Attempt each step in array
    while (nextStepList.length > 0) {
      nextStep = nextStepList.pop();
      var attemptedStep = [currentStep[0] + nextStep[0], currentStep[1] + nextStep[1]];
      //if step has not been taken then take the step
      if (!this.stepInPath(attemptedStep, path)) {
        break;
      }
    }
    //No more steps possible
    if (nextStepList.length == 0) {
      break;
    }
    else {
      currentStep = [currentStep[0] + nextStep[0], currentStep[1] + nextStep[1]];
      console.log(currentStep);
      path.push(currentStep);
      steps--;
    }
  }
  return path;
};
Walk.prototype.stepInPath = function stepInPath(step, path) {
  for (var i = 0; i < path.length; i++) {
    if (step[0] == path[i][0] && step[1] == path[1]) {
      return true;
    }
  }
  return false;
};
Walk.prototype.possibleSteps = function possibleSteps(cardinal) {
  if (cardinal) {
    return [[0, 1], [1, 0], [0, -1], [-1, 0]];
  }
  else {
    return [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]];
  }
};
Walk.prototype.randomDirection = function randomDirection(cardinal) {
  var direction = 0;
  if (cardinal) {
    direction = random.getRandomInt(0, 3);
    switch (direction) {
      case 0:
        return [0, 1];
      case 1:
        return [1, 0];
      case 2:
        return [0, -1];
      case 3:
        return [-1, 0];
    }
  }
  else {
    direction = random.getRandomInt(0, 7);
    switch (direction) {
      case 0:
        return [0, 1];
      case 1:
        return [1, 1];
      case 2:
        return [1, 0];
      case 3:
        return [1, -1];
      case 4:
        return [0, -1];
      case 5:
        return [-1, -1];
      case 6:
        return [-1, 0];
      case 7:
        return [-1, 1];
    }
  }
};
module.exports = Walk;
},{"../util/random":"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/util/random.js"}],"/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    }
};

module.exports = Utils;
},{}]},{},["/Users/ianlintner/Documents/Projects/pixelcrawl/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
